// ╔═══════════════════════════════════════╗
// ║  @Ultr                                ║
// ║  Super OB FVG BOS Tools               ║
// ╚═══════════════════════════════════════╝
// ║  Sessions & Killzones - Forex Market  ║
// ╚═══════════════════════════════════════╝

//@version=5
indicator('Fussion sOb Session Fvg Neon [@Ultr]', 'Fussion sOb [@Ultr]', overlay = true, max_bars_back = 5000, max_boxes_count = 500,max_labels_count = 500,max_lines_count = 500)

//////////   Super   ////////// 
//////////  Colors   ////////// 

// //  ══  Standard  ══
	//  color.aqua								= #00BCD4
	//  color.blue								= #2196F3
	//  color.teal								= #00897B
	//  color.green								= #4CAF50
	//  color.olive								= #808000
	//  color.lime								= #00E676
	//  color.yellow							= #FFEB3B
	//  color.orange							= #FF9800
	//  color.maroon							= #880E4F
	//  color.red								= #FF5252
	//  color.fuchsia							= #E040FB
	//  color.purple							= #9C27B0
	//  color.navy								= #311B92
	//  color.black								= #363A45
	//  color.gray								= #787B86
	//  color.silver							= #B2B5BE
	//  color.white								= #FFFFFF

// //  ═══  Ameritrade  ═══
	//  AmeTrWhite								= #FFFFFF								// AmeritradeWhite
	//  AmeTrGrayPlatinum						= #F7F7F7								// AmeritradeGrayPlatinum
	//  AmeTrGrayNickel							= #F1F1F1								// AmeritradeGrayNickel
	//  AmeTrGrayNickelDark20					= #C0C0C0								// AmeritradeGrayNickelDark20
	//  AmeTrGrayAluminum						= #E6E7E9								// AmeritradeGrayAluminum
	//  AmeTrGrayAsh							= #D8D8D8								// AmeritradeGrayAsh
	//  AmeTrGrayStone							= #999999								// AmeritradeGrayStone
	//  AmeTrGrayIron							= #666666								// AmeritradeGrayIron
	//  AmeTrGrayCharcoal						= #333333								// AmeritradeGrayCharcoal
	//  AmeTrBlack								= #000000								// AmeritradeBlack
	//  AmeTrGreenCabbage						= #EBF6E9								// AmeritradeGreenCabbage
	//  AmeTrGreenVerdeLight70					= #B4D6B2								// AmeritradeGreenVerdeLight70
	//  AmeTrGreenVerdeLight50					= #83BC7F								// AmeritradeGreenVerdeLight50
	//  AmeTrGreenVerdeNat						= #40a829								// AmeritradeGreenVerdeNat
	//  AmeTrGreenVerdeLight20					= #399333								// AmeritradeGreenVerdeLight20
	//  AmeTrGreenVerde							= #087900								// AmeritradeGreenVerde
	//  AmeTrGreenVerdeDark20					= #066000								// AmeritradeGreenVerdeDark20
	//  AmeTrGreenMoss							= #BEE7D3								// AmeritradeGreenMoss
	//  AmeTrGreenMint							= #6DC4BC								// AmeritradeGreenMint
	//  AmeTrGreenPine							= #38635A								// AmeritradeGreenPine
	//  AmeTrRedRose							= #FAD1CF								// AmeritradeRedRose
	//  AmeTrRedRojaLight50						= #E08988								// AmeritradeRedRojaLight50
	//  AmeTrRedRojaLight20						= #CD4241								// AmeritradeRedRojaLight20
	//  AmeTrRedRoja							= #C11312								// AmeritradeRedRoja
	//  AmeTrRedRojaDark20						= #940F0E								// AmeritradeRedRojaDark20
	//  AmeTrorangePeach						= #FCE7CA								// AmeritradeorangePeach
	//  AmeTrorangeCarrot						= #ED8902								// AmeritradeorangeCarrot
	//  AmeTrorangeYam							= #BD5310								// AmeritradeorangeYam
	//  AmeTrblueFrost							= #E1EEF9								// AmeritradeblueFrost
	//  AmeTrblueLagoon							= #316486								// AmeritradeblueLagoon
	//  AmeTrblueNavy							= #2A5673								// AmeritradeblueNavy
	//  AmeTrblueNcean							= #64A1C6								// AmeritradeblueNcean
	//  AmeTrpurpleEggPlant						= #732181								// AmeritradepurpleEggPlant

// //  ═══  Axi  ═══
	//  AxiPrimary								= #fc404d								// AxiPrimary
	//  AxiSecondary							= #282424								// AxiSecondary
	//  AxiAccent								= #61ce70								// AxiAccent
	//  Axi7a46f22								= #d11c36								// Axi7a46f22
	//  Axi1519066c								= #fc404d								// Axi1519066c
	//  Axi3d4fa1a1								= #f0ebe3								// Axi3d4fa1a1
	//  Axi638b46c1								= #fcd758								// Axi638b46c1
	//  Axid07bac9								= #f9b4a8								// Axid07bac9
	//  Axie63a114								= #2c4d5a								// Axie63a114
	//  Axi8bf0845								= #a4d866								// Axi8bf0845
	//  Axi75c6da1								= #282424								// Axi75c6da1
	//  Axi378280f								= #45c2c7								// Axi378280f
	//  Axi4de92c5								= #6caddf								// Axi4de92c5
Axi413dab8			    					= #00275d					            // Axi413dab8
	//  Axib3fab89								= #55165c								// Axib3fab89
	//  Axi548138f								= #45c2c7								// Axi548138f
	//  Axi5ed9920								= #ea1616								// Axi5ed9920
	//  Axi70f7335								= #dd0606								// Axi70f7335

// //  ═══  GrayScale  ═══
	//  GraySFocus								= #2d7aed								// GrayScaleFocus
	//  GraySWhite								= #fff									// GrayScaleWhite
	//  GraySBlack								= #000									// GrayScaleBlack
	//  GraySPrimaryBlackberry					= #2e234b								// GrayScalePrimaryBlackberry
	//  GraySPrimaryBlackberry40				= rgba(46, 35, 75, .4))			    	// GrayScalePrimaryBlackberry40
	//  GraySPrimaryBlackberry65				= rgba(46, 35, 75, .65))				// GrayScalePrimaryBlackberry65
	//  GraySPrimaryCoral						= #ffb198								// GrayScalePrimaryCoral
	//  GraySSecondaryForestGreen				= #244024								// GrayScaleSecondaryForestGreen
	//  GraySSecondaryKeyLime					= #b5ce6f								// GrayScaleSecondaryKeyLime
	//  GraySSecondaryLavender					= #c5bfe4								// GrayScaleSecondaryLavender
	//  GraySSecondaryLavender40				= rgba(197, 191, 228, .4))				// GrayScaleSecondaryLavender40
	//  GraySsecondaryLavender60				= rgba(197, 191, 228, .6))				// GrayScalesecondaryLavender60
	//  GrayShoverWhite							= #c0bdc9								// GrayScalehoverWhite
	//  GrayShoverBlackberry					= #42326b								// GrayScalehoverBlackberry
	//  GraySdisabledBlackberry					= #4d4466								// GrayScaledisabledBlackberry
	//  GraySactiveBlackberry					= #4d4466								// GrayScaleactiveBlackberry
	//  GrayShoverCcoral						= #ffcdbd								// GrayScalehoverCcoral
	//  GraySactiveCcoral						= #ff9e80								// GrayScaleactiveCcoral
	//  GrayShoverGray							= #827b93								// GrayScalehoverGray
	//  GrayShoverGray2							= #6d6581								// GrayScalehoverGray2
	//  GraySgrayCharcoal						= #282525								// GrayScalegrayCharcoal
	//  GraySgrayCharcoal70						= rgba(40, 37, 37, .7))			    	// GrayScalegrayCharcoal70
	//  GraySgrayCharcoal80						= rgba(40, 37, 37, .8))			    	// GrayScalegrayCharcoal80
	//  GraySgrayLight							= #f5f5f5								// GrayScalegrayLight
	//  GraySgrayMedium							= #eee									// GrayScalegrayMedium
	//  GraySgray70								= #696666								// GrayScalegray70
	//  GraySgrayDark							= #c1c1c1								// GrayScalegrayDark
GraySwebSeasalt			    				= #fafafc								// GrayScalewebSeasalt
	//  GraySwebDivider							= #e9e7f1								// GrayScalewebDivider
	//  GraySwebBackground						= #f3f2fa								// GrayScalewebBackground
	//  GraySwebSecondaryText					= #77708a								// GrayScalewebSecondaryText
	//  GraySwebStroke							= #d3ceeb								// GrayScalewebStroke
	//  GraySwebErrors							= #e00000								// GrayScalewebErrors
	//  GraySwebService							= #2d7aed								// GrayScalewebService

// //  ═══  Interactive  ═══
	//  IntAcPrimary3							= hsla(355, 85%, 46%, 0.03)		    	// InteractivePrimary3
	//  IntAcPrimary5							= hsla(355, 85%, 46%, 0.05)		    	// InteractivePrimary5
	//  IntAcPrimary10							= hsla(355, 85%, 46%, 0.10)		    	// InteractivePrimary10
	//  IntAcPrimary20							= hsla(355, 85%, 46%, 0.20)		    	// InteractivePrimary20
	//  IntAcPrimary30							= hsla(355, 85%, 46%, 0.30)		    	// InteractivePrimary30
	//  IntAcPrimary40							= hsla(355, 85%, 46%, 0.40)		    	// InteractivePrimary40
	//  IntAcPrimary50							= hsla(355, 85%, 46%, 0.50)		    	// InteractivePrimary50
	//  IntAcPrimary60							= hsla(355, 85%, 46%, 0.60)		    	// InteractivePrimary60
	//  IntAcPrimary70							= hsla(355, 85%, 46%, 0.70)		    	// InteractivePrimary70
	//  IntAcPrimary80							= hsla(355, 85%, 46%, 0.80)		    	// InteractivePrimary80
	//  IntAcPrimary90							= hsla(355, 85%, 46%, 0.90)		    	// InteractivePrimary90
	//  IntAcPrimary							= hsla(355, 85%, 46%, 1.0)				// InteractivePrimary
	//  IntAcPrimaryDark10						= hsla(355, 85%, 41%, 1.0)				// InteractivePrimaryDark10
	//  IntAcPrimaryDark20						= hsla(355, 85%, 36%, 1.0)				// InteractivePrimaryDark20
	//  IntAcPrimaryDark30						= hsla(355, 85%, 31%, 1.0)				// InteractivePrimaryDark30
	//  IntAcPrimaryDark40						= hsla(355, 85%, 26%, 1.0)				// InteractivePrimaryDark40
	//  IntAcPrimaryDark50						= hsla(355, 85%, 21%, 1.0)				// InteractivePrimaryDark50
	//  IntAcSecondary3							= hsla(0, 0%, 13%, 0.03)				// InteractiveSecondary3
	//  IntAcSecondary5							= hsla(0, 0%, 13%, 0.05)				// InteractiveSecondary5
	//  IntAcSecondary10						= hsla(0, 0%, 13%, 0.10)				// InteractiveSecondary10
	//  IntAcSecondary20						= hsla(0, 0%, 13%, 0.20)				// InteractiveSecondary20
	//  IntAcSecondary30						= hsla(0, 0%, 13%, 0.30)				// InteractiveSecondary30
	//  IntAcSecondary40						= hsla(0, 0%, 13%, 0.40)				// InteractiveSecondary40
	//  IntAcSecondary50						= hsla(0, 0%, 13%, 0.50)				// InteractiveSecondary50
	//  IntAcSecondary60						= hsla(0, 0%, 13%, 0.60)				// InteractiveSecondary60
	//  IntAcSecondary70						= hsla(0, 0%, 13%, 0.70)				// InteractiveSecondary70
	//  IntAcSecondary80						= hsla(0, 0%, 13%, 0.80)				// InteractiveSecondary80
	//  IntAcSecondary90						= hsla(0, 0%, 13%, 0.90)				// InteractiveSecondary90
	//  IntAcSecondary							= hsla(0, 0%, 13%, 1.0)			    	// InteractiveSecondary
	//  IntAcSecondaryDark10					= hsla(0, 0%, 10%, 1.0)			    	// InteractiveSecondaryDark10
	//  IntAcSecondaryDark20					= hsla(0, 0%, 7%, 1.0)					// InteractiveSecondaryDark20
	//  IntAcSecondaryDark30					= hsla(0, 0%, 4%, 1.0)					// InteractiveSecondaryDark30
	//  IntAcSecondaryDark40					= hsla(0, 0%, 1%, 1.0)					// InteractiveSecondaryDark40
	//  IntAcSecondaryDark50					= hsla(0, 0%, 0%, 1.0)					// InteractiveSecondaryDark50
	//  IntAcTertiary3							= hsla(202, 76%, 19%, 0.03)		    	// InteractiveTertiary3
	//  IntAcTertiary5							= hsla(202, 76%, 19%, 0.05)		    	// InteractiveTertiary5
	//  IntAcTertiary10							= hsla(202, 76%, 19%, 0.10)		    	// InteractiveTertiary10
	//  IntAcTertiary20							= hsla(202, 76%, 19%, 0.20)		    	// InteractiveTertiary20
	//  IntAcTertiary30							= hsla(202, 76%, 19%, 0.30)		    	// InteractiveTertiary30
	//  IntAcTertiary40							= hsla(202, 76%, 19%, 0.40)		    	// InteractiveTertiary40
	//  IntAcTertiary50							= hsla(202, 76%, 19%, 0.50)		    	// InteractiveTertiary50
	//  IntAcTertiary60							= hsla(202, 76%, 19%, 0.60)		    	// InteractiveTertiary60
	//  IntAcTertiary70							= hsla(202, 76%, 19%, 0.70)		    	// InteractiveTertiary70
	//  IntAcTertiary80							= hsla(202, 76%, 19%, 0.80)		    	// InteractiveTertiary80
	//  IntAcTertiary90							= hsla(202, 76%, 19%, 0.90)		    	// InteractiveTertiary90
	//  IntAcTertiary							= hsla(202, 76%, 19%, 1.0)				// InteractiveTertiary
	//  IntAcTertiaryDark10						= hsla(202, 76%, 14%, 1.0)				// InteractiveTertiaryDark10
	//  IntAcTertiaryDark20						= hsla(202, 76%, 9%, 1.0)				// InteractiveTertiaryDark20
	//  IntAcTertiaryDark30						= hsla(202, 76%, 4%, 1.0)				// InteractiveTertiaryDark30
	//  IntAcTertiaryDark40						= hsla(202, 76%, 0%, 1.0)				// InteractiveTertiaryDark40

// //  ═══  Visa  ═══
	// 	VisPrimary								= #1434CB								// VisaBrandPrimary
	// 	VisPrimaryLight							= #3B57DE								// VisaBrandPrimaryLight
	// 	VisPrimaryDark							= #021E4C								// VisaBrandPrimaryDark
	// 	VisSecondary							= #FCC015								// VisaBrandSecondary
	// 	VisSecondaryLight						= #FFD700								// VisaBrandSecondaryLight
	// 	VisSecondaryDark						= #F7B600								// VisaBrandSecondaryDark
	// 	VisTertiary7							= #2C2C2C								// VisaBrandTertiary7
	// 	VisTertiary6							= #5C5C5C								// VisaBrandTertiary6
	// 	VisTertiary5							= #979797								// VisaBrandTertiary5
	// 	VisTertiary4							= #B9B9B9								// VisaBrandTertiary4
	// 	VisTertiary3							= #DEDEDE								// VisaBrandTertiary3
	// 	VisTertiary2							= #EEEEEE								// VisaBrandTertiary2
	// 	VisTertiary1							= #F7F7F7								// VisaBrandTertiary1

// //  ═══  Latam  ═══
	// 	LatRedBackground						= rgb(232, 17, 75)						// Latam Red Background

// //  ═══  Arbe Robotics  ═══
	// 	ARoPrimary								= #0035FF								// ArbePrimary
	// 	ARoPrimaryLight							= #0640FF								// ArbePrimaryLight
ARoSecondary			    				= #04ebff								// ArbeSecondary

// //  ═══  AutoX  ═══
	// 	AxPrimary								= #2253F0								// AutoXPrimary
	// 	AxPrimaryLight							= #0050F9								// AutoXPrimaryLight
	// 	AxSecondary								= #75ebc0								// AutoXSecondary

// //  ═══  EEG  ═══
	// 	EEGSkyBlue30							= #01EBF9								// EEGSkyBlue30
	// 	EEGSkyBlue40							= #00E7FD								// EEGSkyBlue40
	// 	EEGFucsia40								= #FF00B1								// EEGFucsia40
	// 	EEGFucsia50								= #FE0CB6								// EEGFucsia50

// //  ═══  Bright Line  ═══
	// 	BrLiYel10								= #FBFD73								// BrightLineBackground Yellow Light
	// 	BrLiYel20								= #FFFD52								// BrightLineBackground Yellow Light
	// 	BrLiYel30								= #FDF43C								// BrightLineBackground Yellow High
	// 	BrLiYel40								= #FEF301								// BrightLineBackground Yellow Nit
	// 	BrLiYel50								= #FFDB00								// BrightLineBackground Yellow Base

// //  ═══  TradingView  ═══
	// 	TVLightMenta50							= #00ffd5								// TradingViewMenta
TVLightGreen50						    	= #33ffac								// TradingViewGreenNit
	// 	TVBlue50								= #0034c5								// TradingViewBlue
	// 	TVLightYellow50							= #eedd45								// TradingViewYellow
TVNitRed40						    		= #e91e63								// TradingViewRedLight
	// 	TVLightBlueSky50						= #12cef8								// TradingViewBlueSky

// //  ═══  TFlab  ═══
TFlAsia			    						= #8bbcfc								// Lite TFlabAsia                        
TFlSydney		    						= #F0B884								// Lite TFlabSydney                      
	// 	TFlTokyo								= #0CC1C0								// Lite TFlabTokyo                       
	// 	TFlShanghai								= #ea1616								// Lite TFlabShanghai                    
	// 	TFlEuro									= #BBE8B5								// Lite TFlabEuro                        
	// 	TFlLondon								= #ACBBE8								// Lite TFlabLondon                      
	// 	TFlNewyork								= #C5ACE8								// Lite TFlabNewyork                     
	// 	TFlNYSE									= #87c2d4								// Lite TFlabNYSE                        

///////////////////////////////// 

//  ═══  Ultr  ═══
UltrBlueSky10								= #59F2E9								// UltrBlueSky10
UltrBlueSky20								= #39F0EA								// UltrBlueSky20
UltrMenta10									= #E0F9EF								// UltrMenta10
UltrMenta20									= #80F3EC								// UtlrMenta20
UltrMenta30									= #7FFFD4								// UltrMenta30
UltrMenta40									= #73FFCA								// UltrMenta40
UltrRose20									= #ffa3e3								// UltrRose
UltrFucsia30								= #ff6fd3								// UltrFucsia
UltrLyla									= #7E57C2								// UltrLyla
UltrLightGray								= #787B86								// UltrLightGray
UltrRedNit									= #de0011								// UltrRedNit
UltrRed										= #db004b								// UltrRed
UltrBlue									= #003bde								// UltrBlue
UltrYellow									= #f4de1a								// UltrYellow
UltrSkyBlue									= #12cef8								// UltrSkyBlue
UltrOrange									= #ff5a00								// UltrOrange

///////////////////////////////// 

//////////   Super   ////////// 
//////////   Vars    ////////// 

plotOB						= input.bool	(defval = true,								title = 'Plot OB',									group = 'Order Blocks')
obBullColor					= input.color	(defval = color.new(UltrBlue, 78),			title = 'Bullish OB Color',					inline = 'Set Custom Color',		group = 'Order Blocks')
obBearColor					= input.color	(defval = color.new(UltrRed, 78),			title = 'Bearish OB Color',					inline = 'Set Custom Color',		group = 'Order Blocks')
obBorderTransparency		= input.int		(defval = 80,								title = 'OB Border Box Transparency',		minval = 0,		maxval = 100,		group = 'Order Blocks')
obMaxBoxSet					= input.int		(defval = 30,								title = 'Maximum OB Box Displayed',			minval = 1,		maxval = 100,		group = 'Order Blocks')
filterMitOB					= input.bool	(defval = false,							title = 'Custom Color Mitigated OB',				group = 'Order Blocks')
mitOBColor					= input.color	(defval = color.new(UltrLyla, 85),			title = 'Mitigated OB Color', 				inline = 'Set Custom Color Mit OB',	group = 'Order Blocks')

plotFVG						= input.bool	(defval = true,								title = 'Plot FVG',							inline = 'FVG sets',				group = 'Fair Value Gaps')
plotStructureBreakingFVG	= input.bool	(defval = true,								title = 'Plot Structure Breaking FVG',		inline = 'FVG sets',				group = 'Fair Value Gaps')
fvgBullColor				= input.color	(defval = color.new(UltrYellow, 90),		title = 'Bullish FVG Color',				inline = 'Set Custom Color',		group = 'Fair Value Gaps')
fvgBearColor				= input.color	(defval = color.new(UltrYellow, 90),		title = 'Bearish FVG Color',				inline = 'Set Custom Color',		group = 'Fair Value Gaps')
fvgStructBreakingColor		= input.color	(defval = color.new(UltrOrange, 90),		title = 'Structure Breaking FVG Color',		inline = 'Set Custom Color',		group = 'Fair Value Gaps')
fvgBorderTransparency		= input.int		(defval = 80,								title = 'FVG Border Box Transparency',		minval = 0,		maxval = 100,		group = 'Fair Value Gaps')
fvgMaxBoxSet				= input.int		(defval = 30,								title = 'Maximum FVG Box Displayed',		minval = 1,		maxval = 100,		group = 'Fair Value Gaps')
filterMitFVG				= input.bool	(defval = false,							title = 'Custom Color Mitigated FVG',											group = 'Fair Value Gaps')
mitFVGColor					= input.color	(defval = color.new(UltrYellow, 95),		title = 'Mitigated FVG Color',				inline = 'Set Custom Color Mit FVG', group = 'Fair Value Gaps')

plotRJB						= input.bool	(defval = true,								title = 'Plot RJB',							inline = 'RJB sets',				group = 'Rejection Blocks')
rjbBullColor				= input.color	(defval = color.new(UltrBlue, 70),			title = 'Bullish RJB Color',				inline = 'Set Custom Color',		group = 'Rejection Blocks')
rjbBearColor				= input.color	(defval = color.new(UltrRed, 70),			title = 'Bearish RJB Color',				inline = 'Set Custom Color',		group = 'Rejection Blocks')
rjbBorderTransparency		= input.int		(defval = 50,								title = 'RJB Border Box Transparency',		minval = 0,		maxval = 100,		group = 'Rejection Blocks')
rjbMaxBoxSet				= input.int		(defval = 30,								title = 'Maximum RJB Box Displayed',		minval = 1,		maxval = 100,		group = 'Rejection Blocks')
filterMitRJB				= input.bool	(defval = false,							title = 'Custom Color Mitigated RJB',				group = 'Rejection Blocks')
mitRJBColor					= input.color	(defval = color.new(UltrMenta10, 90),		title = 'Mitigated RJB Color',				inline = 'Set Custom Color Mit RJB', group = 'Rejection Blocks')

plotPVT						= input.bool	(defval = false,							title = 'Plot Pivots',								group = 'Pivots')
pivotLookup 				= input.int		(defval = 1,								title='Pivot Lookup',	minval = 1,		maxval = 5,								group = 'Pivots')
pvtTopColor					= input.color	(defval = color.new(UltrLightGray, 0),		title = 'Pivot Top Color',					inline = 'PVT Color',				group = 'Pivots')
pvtBottomColor				= input.color	(defval = color.new(UltrLightGray, 0),		title = 'Pivot Bottom Color',				inline = 'PVT Color',				group = 'Pivots')

plotBOS						= input.bool	(defval = false,							title = 'Plot BoS',							inline = 'BOS sets',				group = 'Crossovers')
useHighLowForBullishBoS		= input.bool	(defval = false,							title = 'Use High/Low for Bullish BoS (for Bearish setup)',						group = 'Crossovers')
useHighLowForBearishBoS		= input.bool	(defval = false,							title = 'Use High/Low for Bearish BoS (for Bullish setup)',						group = 'Crossovers')
bosBoxFlag 					= input.bool	(defval = false,							title='BoS Box Length Manually',			group='Crossovers')
bosBoxLength 				= input.int		(defval = 3,								title='BoS Box Length Manually',	minval=1,	maxval=5,	inline='BoS Boxes',	group = 'Crossovers')
bosBullColor				= input.color	(defval = color.new(UltrBlue, 90),			title = 'Bullish BoS Color',				inline = 'Set Custom Color',		group='Crossovers')
bosBearColor				= input.color	(defval = color.new(UltrRed, 90),			title = 'Bearish BoS Color',				inline = 'Set Custom Color',		group='Crossovers')
bosBorderTransparency		= input.int		(defval = 80,								title = 'BoS Border Box Transparency',		minval = 0,		maxval = 100,		group='Crossovers')
bosMaxBoxSet				= input.int		(defval = 10,								title = 'Maximum BoS Box Displayed',		minval = 1,		maxval = 100,		group='Crossovers')

plotHVB						= input.bool	(defval = false,							title = 'Plot HVB',							group = 'High Volume Bar')
hvbBullColor				= input.color	(defval = UltrBlue,							title = 'Bullish HVB Color',				inline = 'Set Custom Color',		group='High Volume Bar')
hvbBearColor				= input.color	(defval = UltrRed,							title = 'Bearish HVB Color',				inline = 'Set Custom Color',		group='High Volume Bar')
hvbEMAPeriod				= input.int		(defval = 12, minval=1,						title = 'Volume EMA Period',													group = 'High Volume Bar')
hvbMultiplier				= input.float	(defval = 1.5,								title = 'Volume Multiplier',				minval = 1,		maxval = 100,		group = 'High Volume Bar')

plotPPDD					= input.bool	(defval = false,							title = "Plot PPDD OB's",					group='Qualitative indicators')
ppddBullColor				= input.color	(defval = color.new(UltrBlue, 0),			title = "Bullish PPDD OB's Color",			group='Qualitative indicators',		inline = 'PPDD Color')
ppddBearColor				= input.color	(defval = color.new(UltrRed, 0),			title = "Bearish PPDD OB's Color",			group='Qualitative indicators',		inline = 'PPDD Color')

plotOBFVG					= input.bool	(defval = true,								title = 'Plot Stacked OB+FVG',				group='Qualitative indicators')
obfvgBullColor				= input.color	(defval = color.new(UltrBlue, 0),			title = 'Bullish Stacked OB+FVG Color',		group='Qualitative indicators',		inline = 'OBFVG Color')
obfvgBearColor				= input.color	(defval = color.new(UltrRed, 0),			title = 'Bearish Stacked OB+FVG Color',		group='Qualitative indicators',		inline = 'OBFVG Color')

plotLabelOB					= input.bool	(defval = true,								title = 'Plot OB Label',					inline = 'OB label',				group = 'Label Options')
obLabelColor				= input.color	(defval = color.new(UltrMenta10, 80),		title = 'Color',							inline = 'OB label',				group = 'Label Options')

plotLabelFVG				= input.bool	(defval = false,							title = 'Plot FVG Label',					inline = 'FVG label',				group = 'Label Options')
fvgLabelColor				= input.color	(defval = UltrMenta10,						title = 'Color',							inline = 'FVG label',				group = 'Label Options')

plotLabelRJB				= input.bool	(defval = false,							title = 'Plot RJB Label',					inline = 'RJB label',				group = 'Label Options')
rjbLabelColor				= input.color	(defval = UltrMenta10,						title = 'Color',							inline = 'RJB label',				group = 'Label Options')

plotLabelBOS				= input.bool	(defval = false,							title = 'Plot BoS Label',					inline = 'BOS label',				group = 'Label Options')
bosLabelColor				= input.color	(defval = UltrMenta10,						title = 'Color',							inline = 'BOS label',				group = 'Label Options')

labelSize					= input.string	(defval = "Tiny",			title = "Text Size", 			options = ["Huge", "Large", "Small", "Tiny", "Auto", "Normal"],	group = 'Global')
boxBorder					= input.string	(defval = "Solid",			title = "Type Border Style",	options = ["Dashed", "Dotted", "Solid"],						group = 'Global')

//////////  Super  ////////// 
//////////  Types  ////////// 
var int _ob					= 1
var int _fvg				= 2
var int _rjb				= 3
var int _bos				= 4

//////////  Super   ////////// 
//////////  Switch  ////////// 

string switchLabel = switch labelSize
	"Auto"		=> size.auto
	"Tiny"		=> size.tiny
	"Small"		=> size.small
	"Normal"	=> size.normal
	"Large"		=> size.large
	"Huge"		=> size.huge

string switchBorder = switch boxBorder
	"Solid"		=> line.style_solid
	"Dashed"	=> line.style_dashed
	"Dotted"	=> line.style_dotted

//////////  Super   ////////// 
//////////  Labels  ////////// 

//  ══  Box  ══
var string _obLabel			= "OB"
var string _fvgLabel		= "FVG"
var string _rjbLabel		= "RJB"
var string _bosLabel		= "BoS"
var string _plus			= "+"
var string _minus			= "-"
var string _empty			= ""


//////////  Super   ////////// 
//////////  Arrays  ////////// 

//  ══  Box  ══
var box[] _bearBoxesOB		= array.new_box()
var box[] _bullBoxesOB		= array.new_box()
var box[] _bearBoxesFVG		= array.new_box()
var box[] _bullBoxesFVG		= array.new_box()
var box[] _bearBoxesRJB		= array.new_box()
var box[] _bullBoxesRJB		= array.new_box()
var box[] _bearBoxesBOS		= array.new_box()
var box[] _bullBoxesBOS		= array.new_box()

//////////    Super    ////////// 
//////////  Functions  ////////// 

isUp(index) =>
	close[index] > open[index]

isDown(index) =>
	close[index] < open[index]

isObUp(index) =>
	isDown(index + 1) and isUp(index) and close[index] > high[index + 1]

isObDown(index) =>
	isUp(index + 1) and isDown(index) and close[index] < low[index + 1]

isFvgUp(index) =>
	(low[index] > high[index + 2])

isFvgDown(index) =>
	(high[index] < low[index + 2])

//  ══  Function to Calculte Box Length  ══
_controlBox(_boxes, _high, _low, _type) =>
	if array.size(_boxes) > 0
		for i = array.size(_boxes) - 1 to 0 by 1
			_box = array.get(_boxes, i)
			_boxLow = box.get_bottom(_box)
			_boxHigh = box.get_top(_box)
			_boxRight = box.get_right(_box)
			if bosBoxFlag and _type == _bos
				if na or (bar_index + bosBoxLength - 1 == _boxRight and not((_high > _boxLow and _low < _boxLow) or (_high > _boxHigh and _low < _boxHigh)))
					box.set_right(_box, bar_index + bosBoxLength - 1)
			else if (filterMitOB and _type == _ob) or (filterMitFVG and _type == _fvg) or (filterMitRJB and _type == _rjb)
				if na or (bar_index == _boxRight and not((_high > _boxLow and _low < _boxLow) or (_high > _boxHigh and _low < _boxHigh)))
					box.set_right(_box, bar_index + 1)
				else
					if _type == _ob
						box.set_bgcolor(_box, mitOBColor)
						box.set_border_color(_box, mitOBColor)
					else if _type == _fvg
						box.set_bgcolor(_box, mitFVGColor)
						box.set_border_color(_box, mitFVGColor)
					else if _type == _rjb
						box.set_bgcolor(_box, mitRJBColor)
						box.set_border_color(_box, mitRJBColor)
			else
				if na or (bar_index == _boxRight and not((_high > _boxLow and _low < _boxLow) or (_high > _boxHigh and _low < _boxHigh)))
					box.set_right(_box, bar_index + 1)

//////////   Super   ////////// 
//////////  Display  ////////// 

//  ═══  Pivots  ═══
hih			= ta.pivothigh(high,	pivotLookup,		pivotLookup)
lol			= ta.pivotlow(low ,		pivotLookup,		pivotLookup)
top			= ta.valuewhen(hih,		high[pivotLookup],	0)
bottom		= ta.valuewhen(lol,		low [pivotLookup],	0)
plot(top, offset=-pivotLookup, linewidth=1, color=(top != top[1] ? na : (plotPVT ? pvtTopColor : na)), title="Pivot Top")
plot(bottom, offset=-pivotLookup, linewidth=1, color=(bottom != bottom[1] ? na : (plotPVT ? pvtBottomColor : na)), title="Pivot Bottom")

//////////  Order Block  //////////

//  ══  Bullish OB Box Plotting  ══
if isObUp(1) and plotOB
	_bullboxOB = box.new(left=bar_index - 2, top=high[2], right=bar_index, bottom=math.min(low[2], low[1]), border_color=color.new(obBullColor, obBorderTransparency), border_style=switchBorder, border_width=1, bgcolor=obBullColor, 
	 text=plotLabelOB ? _obLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=obLabelColor)
	if array.size(_bullBoxesOB) > obMaxBoxSet
		box.delete(array.shift(_bullBoxesOB))
	array.push(_bullBoxesOB, _bullboxOB)

//  ══  Bearish OB Box Plotting  ══
if isObDown(1) and plotOB
	_bearboxOB = box.new(left=bar_index - 2, top=math.max(high[2], high[1]), right=bar_index, bottom=low[2], border_color=color.new(obBearColor, obBorderTransparency), border_style=switchBorder, border_width=1, bgcolor=obBearColor, 
	 text=plotLabelOB ? _obLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=obLabelColor)
	if array.size(_bearBoxesOB) > obMaxBoxSet
		box.delete(array.shift(_bearBoxesOB))
	array.push(_bearBoxesOB, _bearboxOB)
	
if plotOB
	_controlBox(_bearBoxesOB, high, low, _ob)
	_controlBox(_bullBoxesOB, high, low, _ob)

//////////  Fair Value Gap  //////////

//  ══  Bullish FVG Box Plotting  ══
if isFvgUp(0)
	box _bullboxFVG = na
	if plotStructureBreakingFVG and (close[1] > top) and (low[1] < top) and (high[2] < top) and (low > top)
		_bullboxFVG := box.new(left=bar_index-2, top=low[0], right=bar_index, bottom=high[2], bgcolor=fvgStructBreakingColor, border_color=color.new(fvgStructBreakingColor, fvgBorderTransparency), border_style=switchBorder, border_width=1,
		 text=plotLabelFVG ? _fvgLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=fvgLabelColor)        
	else if plotFVG   
		_bullboxFVG := box.new(left=bar_index-2, top=low[0], right=bar_index, bottom=high[2], bgcolor=fvgBullColor, border_color=color.new(fvgBullColor, fvgBorderTransparency), border_style=switchBorder, border_width=1,
		 text=plotLabelFVG ? _fvgLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=fvgLabelColor)    
	if array.size(_bullBoxesFVG) > fvgMaxBoxSet
		box.delete(array.shift(_bullBoxesFVG))
	array.push(_bullBoxesFVG, _bullboxFVG)

//  ══  Bearish FVG Box Plotting  ══

if isFvgDown(0)
	box _bearboxFVG = na
	if plotStructureBreakingFVG and (close[1] < bottom) and (high[1] > bottom) and (low[2] > bottom) and (high < bottom)
		_bearboxFVG := box.new(left=bar_index-2, top=low[2], right=bar_index, bottom=high[0], bgcolor=fvgStructBreakingColor, border_color=color.new(fvgStructBreakingColor, fvgBorderTransparency), border_style=switchBorder, border_width=1,
		 text=plotLabelFVG ? _fvgLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=fvgLabelColor)    
	else if plotFVG
		_bearboxFVG := box.new(left=bar_index-2, top=low[2], right=bar_index, bottom=high[0], bgcolor=fvgBearColor, border_color=color.new(fvgBearColor, fvgBorderTransparency), border_style=switchBorder, border_width=1,
		 text=plotLabelFVG ? _fvgLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=fvgLabelColor)    
	if array.size(_bearBoxesFVG) > fvgMaxBoxSet
		box.delete(array.shift(_bearBoxesFVG))
	array.push(_bearBoxesFVG, _bearboxFVG)
	
if plotFVG or plotStructureBreakingFVG
	_controlBox(_bearBoxesFVG, high, low, _fvg)
	_controlBox(_bullBoxesFVG, high, low, _fvg)

//////////  Rejection Block  //////////

if plotRJB
	isDownRjbObCondition = isObDown(1)
	isDownRjb1 = isDownRjbObCondition and  (high[1] < (close[2] + 0.2*(high[2]-close[2]))) // RJB is on trapped's wick and <50% of the wick was covered by signal
	isDownRjb2 = isDownRjbObCondition and (high[1] > high[2]) // RJB is on signal's wick
	if isDownRjb1 and plotRJB
		_bearboxRJB = box.new(left=bar_index-2, top=high[2], right=bar_index, bottom=close[2], bgcolor=rjbBearColor, border_color=color.new(rjbBearColor, rjbBorderTransparency), border_style=switchBorder, border_width=1,
		 text=plotLabelRJB ? _rjbLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=rjbLabelColor)
		if array.size(_bearBoxesRJB) > rjbMaxBoxSet
			box.delete(array.shift(_bearBoxesRJB))
		array.push(_bearBoxesRJB, _bearboxRJB)
		
	if isDownRjb2 and plotRJB
		_bearboxRJB = box.new(left=bar_index-1, top=high[1], right=bar_index, bottom=open[1], bgcolor=rjbBearColor, border_color=color.new(rjbBearColor, rjbBorderTransparency), border_style=switchBorder, border_width=1,
		 text=plotLabelRJB ? _rjbLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=rjbLabelColor)
		if array.size(_bearBoxesRJB) > rjbMaxBoxSet
			box.delete(array.shift(_bearBoxesRJB))
		array.push(_bearBoxesRJB, _bearboxRJB)

//  ══  Bullish RJB Box Plotting  ══
if plotRJB
	isUpRjbObCondition = isObUp(1)
	isUpRjb1 = isUpRjbObCondition and (low[1] > (close[2] - 0.2*(close[2]-low[2]))) // RJB is on trapped's wick and <50% of the wick was covered by signal
	isUpRjb2 = isUpRjbObCondition and (low[1] < low[2]) // RJB is on signal's wick
	if isUpRjb1 and plotRJB
		_bullboxRJB = box.new(left=bar_index-2, top=close[2], right=bar_index, bottom=low[2], bgcolor=rjbBullColor, border_color=color.new(rjbBullColor, rjbBorderTransparency), border_style=switchBorder, border_width=1,
		 text=plotLabelRJB ? _rjbLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=rjbLabelColor)
		if array.size(_bullBoxesRJB) > rjbMaxBoxSet
			box.delete(array.shift(_bullBoxesRJB))
		array.push(_bullBoxesRJB, _bullboxRJB)
	
	if isUpRjb2 and plotRJB
		_bullboxRJB = box.new(left=bar_index-1, top=open[1], right=bar_index, bottom=low[1], bgcolor=rjbBullColor, border_color=color.new(rjbBullColor, rjbBorderTransparency), border_style=switchBorder, border_width=1, 
		 text=plotLabelRJB ? _rjbLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=rjbLabelColor)
		if array.size(_bullBoxesRJB) > rjbMaxBoxSet
			box.delete(array.shift(_bullBoxesRJB))
		array.push(_bullBoxesRJB, _bullboxRJB)

if plotRJB
	_controlBox(_bearBoxesRJB, high, low, _rjb)
	_controlBox(_bullBoxesRJB, high, low, _rjb)

//////////  Crossovers a.k.a. Break of Structure  //////////

//  ══  Bullish BOS Box Plotting  ══
if plotBOS
	if ta.crossover(useHighLowForBullishBoS ? high : close, top)
		_bullboxBOS = box.new(left=bar_index, top=top, right=bosBoxFlag ? bar_index+bosBoxLength : bar_index+1, bottom=bottom, bgcolor=bosBullColor, border_color=color.new(bosBullColor, bosBorderTransparency), border_style=switchBorder, border_width=1, 
		 text=plotLabelBOS ? _bosLabel + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=bosLabelColor)
		if array.size(_bullBoxesBOS) > bosMaxBoxSet
			box.delete(array.shift(_bullBoxesBOS))
		array.push(_bullBoxesBOS, _bullboxBOS)

//  ══  Bearish BOS Box Plotting  ══
if plotBOS 
	if ta.crossunder(useHighLowForBearishBoS ? low : close, bottom)
		_bearboxBOS = box.new(left=bar_index, top=top, right=bosBoxFlag ? bar_index+bosBoxLength : bar_index+1, bottom=bottom, bgcolor=bosBearColor, border_color=color.new(bosBearColor, bosBorderTransparency), border_style=switchBorder, border_width=1, 
		 text=plotLabelBOS ? _bosLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=switchLabel, text_color=bosLabelColor)
		if array.size(_bearBoxesBOS) > bosMaxBoxSet
			box.delete(array.shift(_bearBoxesBOS))
		array.push(_bearBoxesBOS, _bearboxBOS)

if plotBOS
	_controlBox(_bearBoxesBOS, high, low, _bos)
	_controlBox(_bullBoxesBOS, high, low, _bos)

//////////  Premium Premium & Discount Discount  //////////

premiumPremium		= plotPPDD and isObDown(0) and ((math.max(high, high[1]) > top and close < top) or (math.max(high, high[1]) > top[1] and close < top[1]))
discountDiscount	= plotPPDD and isObUp(0) and ((math.min(low, low[1]) < bottom and close > bottom) or (math.min(low, low[1]) < bottom[1] and close > bottom[1]))
plotshape(premiumPremium,		"Bearish PPDD OB",			style = shape.triangledown,		location = location.abovebar,		color = ppddBearColor,		size = size.tiny)
plotshape(discountDiscount,		"Bullish PPDD OB",			style = shape.triangleup,		location = location.belowbar,		color = ppddBullColor,		size = size.tiny)

premiumPremium1 = plotPPDD and (isUp(1) and isDown(0) and close[0] < open[1]) and ((math.max(high, high[1]) > top and close < top) or (math.max(high, high[1]) > top[1] and close < top[1])) and not premiumPremium
discountDiscount1 = plotPPDD and (isDown(1) and isUp(0) and close[0] > open[1]) and ((math.min(low, low[1]) < bottom and close > bottom) or (math.min(low, low[1]) < bottom[1] and close > bottom[1])) and not discountDiscount
plotshape(premiumPremium1,		"Bearish PPDD Weak OB",		style = shape.xcross,			location = location.abovebar,		color = ppddBearColor,		size = size.tiny)
plotshape(discountDiscount1,	"Bullish PPDD Weak OB",		style = shape.xcross,			location = location.belowbar,		color = ppddBullColor,		size = size.tiny)

//////////  High Volume Bars  //////////

volEma = ta.ema(volume,	hvbEMAPeriod)
isHighVolume = volume > (hvbMultiplier * volEma)
barcolor(plotHVB and isUp(0) and isHighVolume ? hvbBullColor : na,		title = "Bullish HVB")
barcolor(plotHVB and isDown(0) and isHighVolume ? hvbBearColor : na,	title = "Bearish HVB")

//////////  Stacked OB + FVG  //////////

plotshape(plotOBFVG and isFvgDown(0) and isObDown(1),		"Bearish OB+FVG Stack",		style = shape.diamond,		location = location.abovebar,		color = obfvgBearColor,		size = size.tiny)
plotshape(plotOBFVG and isFvgUp(0) and isObUp(1),			"Bullish OB+FVG Stack",		style = shape.diamond,		location = location.belowbar,		color = obfvgBullColor,		size = size.tiny)

/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////

//  ══════════
//  ══  FM  ══
//  ══  Variables  ══

//  ══  Session Sydney  ══
grpSydney			= " Sydney "
sesSydneyShow		= input(false,										title = '',					inline = 'lineSydney',			group = grpSydney) 
sesSydneySess		= input.session('1700-0200',						title = '',					inline = 'lineSydney',			group = grpSydney)
sesSydneyColor		= input.color(color.new(TFlSydney, 60),		        title = '',					inline = 'lineSydney',			group = grpSydney)
sesSydneyText		= 'Sydney'

//  ══  Session Tokyo  ══
grpTokyo			= " Tokyo "
sesTokyoShow		= input(true,										title = '',					inline = 'lineTokyo',			group = grpTokyo) 
sesTokyoSess		= input.session('1800-0300',						title = '',					inline = 'lineTokyo',			group = grpTokyo)
sesTokyoColor		= input.color(color.new(TFlAsia, 60),	        	title = '',					inline = 'lineTokyo',			group = grpTokyo)
sesTokyoText		= 'Tokyo'

//  ══  Session London  ══
grpLondon			= " Londres "
sesLondonShow		= input(true,										title = '',					inline = 'lineLondres',			group = grpLondon) 
sesLondonSess		= input.session('0200-1100',						title = '',					inline = 'lineLondres',			group = grpLondon)
sesLondonColor		= input.color(color.new(UltrRose20, 60),		    title = '',					inline = 'lineLondres',			group = grpLondon)
sesLondonText		= 'London'

//  ══  Session New York  ══
grpNewYork			= " New York "
sesNewyorkShow		= input(true,										title = '',					inline = 'lineNewyork',			group = grpNewYork) 
sesNewyorkSess		= input.session('0700-1600',						title = '',					inline = 'lineNewyork',			group = grpNewYork)
sesNewyorkColor		= input.color(color.new(TVLightGreen50, 60),	    title = '',					inline = 'lineNewyork',			group = grpNewYork)
sesNewyorkText		= 'New York'

//  ══  Session NYSE  ══
grpNYSE				= " NYSE "
sesNYSEShow			= input(false,										title = '',					inline = 'lineNYSE',			group = grpNYSE) 
sesNYSESess			= input.session('0830-1500',						title = '',					inline = 'lineNYSE',			group = grpNYSE)
sesNYSEColor		= input.color(color.new(ARoSecondary, 60),	        title = '',					inline = 'lineNYSE',			group = grpNYSE)
sesNYSEText			= 'NYSE'

//  ══  KillZones  ══
grpKillz			= " Kill Zones "
killShowAlva		= input(false,										title = '',					inline = 'timeAlva',			group = grpKillz) 
killShowPre			= input(true,										title = '',					inline = 'timePre',				group = grpKillz) 
killShowOpen		= input(true,										title = '',					inline = 'timeOpen',			group = grpKillz) 
killShowRally		= input(true,										title = '',					inline = 'timeRally',			group = grpKillz) 
killShowClose		= input(false,										title = '',					inline = 'timeClose',			group = grpKillz) 

killTimeAlva		= input.session('0430-0600',						title = '',					inline = 'timeAlva',			group = grpKillz)
killTimePre			= input.session('0700-0745',						title = '',					inline = 'timePre',				group = grpKillz)
killTimeOpen		= input.session('0900-1045',						title = '',					inline = 'timeOpen',			group = grpKillz)
killTimeRally		= input.session('1130-1145',						title = '',					inline = 'timeRally',			group = grpKillz)
killTimeClose		= input.session('1230-1345',						title = '',					inline = 'timeClose',			group = grpKillz)

killColorAlva		= TFlSydney
killColorPre		= TFlAsia
killColorOpen		= UltrRose20
killColorRally		= TVLightGreen50
killColorClose		= ARoSecondary

//  ══  Time Zone  ══
string timeNYSE				= "UTC-5"									//	'UTC-5'
string timeNewY				= "America/New_York"						//	'UTC.4'
string timeChig				= "America/Chicago"							//	'UTC-5'
string timeArge				= "America/Argentina/Buenos_Aires"			//	'UTC-3'
string timeLond				= "Europe/London"							//	'UTC+1'
string timeToky				= "Asia/Tokyo"								//	'UTC+9'
string timeSydn				= "Australia/Sydney" 						//	'UTC+10'

//  ══════════
//  ══  FM  ══
//  ══  Options  ══

optionLines		= input.string  (defval="Dotted",		title="Line",			options = ["Solid", "Dotted", "Dashed"])
optionTextSize	= input.string  (defval="Small",		title="Size",			options = ["Tiny", "Small", "Auto", "Normal"])

optionSession	= input.string  (defval="Chicago",		title="Sesiones",		options = ["New York", "Chicago", "NYSE", "Londres", "Tokyo", "Sydney, Argentina"])
optionKillZ		= input.string  (defval="Chicago",		title="KillZones",		options = ["New York", "Chicago", "NYSE", "Londres", "Tokyo", "Sydney, Argentina"])

//  ══════════
//  ══  FM  ══
//  ══  Types  ══

type OHL
	float O = open
	float H = high
	float L = low
	float C = close
	float V = volume

//  ══════════
//  ══  FM  ══
//  ══  Switch  ══

string switchLines = switch optionLines
	"Solid"		 => line.style_solid			//  Solid
	"Dashed"	 => line.style_dashed			//  Dashed
	"Dotted"	 => line.style_dotted			//  Dotted
	=> line.style_solid	

string switchText = switch optionTextSize
	"Auto"		=> size.auto
	"Tiny"		=> size.tiny
	"Small"		=> size.small
	"Normal"	=> size.normal

string switchSession = switch optionSession
	"NYSE"	 	 => timeNYSE
	"New York"	 => timeNewY
	"Chicago"	 => timeChig
	"Londres"	 => timeLond
	"Tokyo"		 => timeToky
	"Sydney"	 => timeSydn
	"Argentina"	 => timeArge
	=> timeChig	

string switchKillZone = switch optionKillZ
	"NYSE"	 	 => timeNYSE
	"New York"	 => timeNewY				
	"Chicago"	 => timeChig	
	"Londres"	 => timeLond	
	"Tokyo"		 => timeToky
	"Sydney"	 => timeSydn
	"Argentina"	 => timeArge
	=> timeChig

//  ══════════
//  ══  FM  ══
//  ══  Instances  ══

ohl = OHL.new()

//  ══  Info Table  ══
grpTableShow			= "Información"
ShowInfoTable			= input(defval = true,										title = "",				inline = 'Table Info',				group =	grpTableShow)

tableBorderColor		= input(color.new(ARoSecondary, 85),						title = "",				inline = 'Table Info',				group = grpTableShow)
tableGroundColor		= input(color.new(Axi413dab8, 25),							title = "",				inline = 'Table Info',				group = grpTableShow)
tableTextColor			= input(color.new(GraySwebSeasalt, 40),			        	title = "",				inline = 'Table Info',				group = grpTableShow)
tableOpenColor			= input(color.new(UltrMenta40, 25),						    title = "",				inline = 'Table Info',				group = grpTableShow)
tableClosedColor		= input(color.new(TVNitRed40, 25),							title = "",				inline = 'Table Info',				group = grpTableShow,			tooltip = "Marco, Fondo, Texto, Open, Close")

//  ══════════
//  ══  FM  ══
//  ══  Functions  ══

//  ══  Sessions  ══
OnSessTokyo			= math.sign(nz(time(timeframe.period,		sesTokyoSess,		switchSession)))
OnSessLondon		= math.sign(nz(time(timeframe.period,		sesLondonSess,		switchSession)))
OnSessNewyork		= math.sign(nz(time(timeframe.period,		sesNewyorkSess,		switchSession)))
OnSessNYSE			= math.sign(nz(time(timeframe.period,		sesNYSESess,		switchSession)))
OnSessSydney		= math.sign(nz(time(timeframe.period,		sesSydneySess,		switchSession)))

//  ══  KillZones  ══
OnKillZoneAlva		= math.sign(nz(time(timeframe.period,		killTimeAlva,		switchKillZone)))
OnKillZonePre		= math.sign(nz(time(timeframe.period,		killTimePre,		switchKillZone)))
OnKillZoneOpen		= math.sign(nz(time(timeframe.period,		killTimeOpen,		switchKillZone)))
OnKillZoneRally		= math.sign(nz(time(timeframe.period,		killTimeRally,		switchKillZone)))
OnKillZoneClose		= math.sign(nz(time(timeframe.period,		killTimeClose,		switchKillZone)))

//  ══  High & Low Session Detector  ══
LowHighSessionDetector(On_Session, Color_Session, Text_Session) =>
	var int Bar		= 0
	var float High	= 0.0 
	var float Low	= 0.0
	var box BoX		= na
	var label LabeL	= na 

	if  (On_Session[1] == 0 and On_Session == 1)
		Bar			:= bar_index
		High		:= high
		Low			:= low

	else if (On_Session[1] == 1 and On_Session == 1)
		High		:= math.max(high , High) 
		Low			:=   math.min(low , Low)

	else if On_Session == 0
		High		:= 0.0 
		Low			:= 0.0
		Bar			:= 0

	if On_Session > On_Session[1]
		BoX			:= box.new(bar_index,High, bar_index , Low, bgcolor = color.new(Color_Session, 98),
		 border_color = color.new(Color_Session, 40),
		 border_width = 2,
		 border_style = switchLines)
		
		LabeL		:= label.new(Bar, High , text = Text_Session ,xloc = xloc.bar_index, yloc = yloc.price, size = switchText,
		 style = (Text_Session == 'Sydney' or Text_Session == 'Europe' ) ? label.style_label_lower_right  : 
		 Text_Session == 'Asia' ?  label.style_label_down :  label.style_label_lower_left,
		 textcolor = Color_Session, color = color.rgb(255, 255, 255, 100))

	if On_Session and On_Session == On_Session[1]
		box.set_top(BoX, High)
		box.set_bottom(BoX, Low)
		box.set_right(BoX, bar_index)
		label.set_x(LabeL,math.round(math.avg(Bar,bar_index)))
		label.set_y(LabeL, High)

	[High , Low ]

if sesSydneyShow
	[HighS, LowS]	= LowHighSessionDetector(OnSessSydney,		sesSydneyColor,			sesSydneyText)

if sesTokyoShow
	[HighT, LowT]	= LowHighSessionDetector(OnSessTokyo,		sesTokyoColor,			sesTokyoText)

if sesLondonShow
	[HighL, LowL]	= LowHighSessionDetector(OnSessLondon,		sesLondonColor,			sesLondonText)

if sesNewyorkShow
	[HighN, LowN]	= LowHighSessionDetector(OnSessNewyork,		sesNewyorkColor,		sesNewyorkText)

if sesNYSEShow
	[HighNY, LowNY]	= LowHighSessionDetector(OnSessNYSE,		sesNYSEColor,			sesNYSEText)

//  ══  High & Low KillZones  ══
LowHighKillZonesDraw(onKillzones, colorKillzones) =>
	var int Bar		= 0
	var float High	= 0.0 
	var float Low	= 0.0
	var box BoX		= na
	var label LabeL	= na 

	if  (onKillzones[1] == 0 and onKillzones == 1)
		Bar			:= bar_index
		High		:= high
		Low			:= low

	else if (onKillzones[1] == 1 and onKillzones == 1)
		High		:= math.max(high , High) 
		Low			:=   math.min(low , Low)

	else if onKillzones == 0
		High		:= 0.0 
		Low			:= 0.0
		Bar			:= 0

	if onKillzones > onKillzones[1]
		BoX			:= box.new(bar_index,High, bar_index , Low, bgcolor = color.new(colorKillzones, 78),
		 border_color = color.new(colorKillzones, 60),
		 border_width = 1,
		 border_style = switchLines)
		
	if onKillzones and onKillzones == onKillzones[1]
		box.set_top(BoX, High)
		box.set_bottom(BoX, Low)
		box.set_right(BoX, bar_index)
		label.set_x(LabeL,math.round(math.avg(Bar,bar_index)))
		label.set_y(LabeL, High)

	[High , Low ]

if killShowAlva
	[HighS, LowS]	= LowHighKillZonesDraw(OnKillZoneAlva,		killColorAlva)

if killShowPre
	[HighT, LowT]	= LowHighKillZonesDraw(OnKillZonePre,		killColorPre)

if killShowOpen
	[HighL, LowL]	= LowHighKillZonesDraw(OnKillZoneOpen,		killColorOpen)

if killShowRally
	[HighN, LowN]	= LowHighKillZonesDraw(OnKillZoneRally,		killColorRally)

if killShowClose
	[HighNY, LowNY]	= LowHighKillZonesDraw(OnKillZoneClose,		killColorClose)

//  ══════════
//  ══  FM  ══
//  ══  Display  ══

//  ══  Table  ══
var InfoTable	= table.new(position.top_right, 4, 7,
 bgcolor		= tableGroundColor,		border_color	= tableBorderColor,
 border_width	= 1,					frame_color		= #373a46,
 frame_width	= 1)

if ShowInfoTable
	table.cell			(InfoTable, 0, 0,		'Trading',			text_color = color.white,			text_size = switchText)
	table.merge_cells	(InfoTable, 0, 0, 3, 0)
	table.cell			(InfoTable, 0, 1,		'Sesión',			text_color = color.white,			text_size = switchText)
	table.cell			(InfoTable, 1, 1,		'Estado',			text_color = color.white,			text_size = switchText)
	table.cell			(InfoTable, 2, 1,		'Inicio',			text_color = color.white,			text_size = switchText)
	table.cell			(InfoTable, 3, 1,		'Cierre',			text_color = color.white,			text_size = switchText)

	table.cell			(InfoTable, 0, 2,		sesSydneyText,		text_color = sesSydneyColor,		text_size = switchText)
	table.cell			(InfoTable, 0, 3,		sesTokyoText,		text_color = sesTokyoColor,			text_size = switchText)
	table.cell			(InfoTable, 0, 4,		sesLondonText,		text_color = sesLondonColor,		text_size = switchText)
	table.cell			(InfoTable, 0, 5,		sesNewyorkText,		text_color = sesNewyorkColor,		text_size = switchText)
	table.cell			(InfoTable, 0, 6,		sesNYSEText,		text_color = sesNYSEColor,			text_size = switchText)
	
	table.cell			(InfoTable, 1, 2,		(OnSessSydney		? 'Open'			: 'Closed')
	  , bgcolor									= OnSessSydney		? tableOpenColor	: tableClosedColor
	  , text_color								= tableGroundColor
	  , text_size								= switchText)

	table.cell			(InfoTable, 1, 3,		(OnSessTokyo		? 'Open'			: 'Closed')
	  , bgcolor									= OnSessTokyo		? tableOpenColor	: tableClosedColor
	  , text_color								= tableGroundColor
	  , text_size								= switchText)

	table.cell			(InfoTable, 1, 4,		(OnSessLondon		? 'Open'			: 'Closed')
	  , bgcolor									= OnSessLondon		? tableOpenColor	: tableClosedColor
	  , text_color								= tableGroundColor
	  , text_size								= switchText)

	table.cell			(InfoTable, 1, 5,		(OnSessNewyork		? 'Open'			: 'Closed')
	  , bgcolor									= OnSessNewyork		? tableOpenColor	: tableClosedColor
	  , text_color								= tableGroundColor
	  , text_size								= switchText)

	table.cell			(InfoTable, 1, 6,		(OnSessNYSE			? 'Open'			: 'Closed')
	  , bgcolor									= OnSessNYSE		? tableOpenColor	: tableClosedColor
	  , text_color								= tableGroundColor
	  , text_size								= switchText)

	table.cell			(InfoTable, 2, 2,		'17:00' ,			text_color = tableTextColor,			text_size = switchText)
	table.cell			(InfoTable, 2, 3,		'18:00' ,			text_color = tableTextColor,			text_size = switchText)
	table.cell			(InfoTable, 2, 4,		'02:00' ,			text_color = tableTextColor,			text_size = switchText) 
	table.cell			(InfoTable, 2, 5,		'07:00' ,			text_color = tableTextColor,			text_size = switchText)  
	table.cell			(InfoTable, 2, 6,		'08:30' ,			text_color = tableTextColor,			text_size = switchText)

	table.cell			(InfoTable, 3, 2,		'02:00' ,			text_color = tableTextColor,			text_size = switchText)
	table.cell			(InfoTable, 3, 3,		'03:00' ,			text_color = tableTextColor,			text_size = switchText)
	table.cell			(InfoTable, 3, 4,		'11:00' ,			text_color = tableTextColor,			text_size = switchText) 
	table.cell			(InfoTable, 3, 5,		'15:57' ,			text_color = tableTextColor,			text_size = switchText)  
	table.cell			(InfoTable, 3, 6,		'15:00' ,			text_color = tableTextColor,			text_size = switchText)

